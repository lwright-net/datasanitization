#+title: Script for sanitizing disks
#+author: Lane Wright
#+PROPERTY: header-args :tangle sanitize.sh
#+auto_tangle: t

* About this script
I came across a need at work to sanitize disks from decommissioned laptops with potentially sensitive data on them.
This ispired me to write my first 'proper' script, that does a real task that would be needed in a business environment.
Goals for this script are:
 + follow NIST guidelines laid out in document 800-88 to ensure no data can be recovered
 + provide some sort of logging functionality that is printable on paper records
 + do this as fast as possible (some of these disks can be large)
 + be simple enough operators unfamiliar with Linux can use this script
In this script I will depend on the following to be installed:
 + the GNU =coreutils=
   + =dd= (byte-level utility for copying data)
   + =tr= (translate)
 + the built-in =linux= utils
   + =lsblk= (list block devices)
 + the =bash= shell
 + =cups= the common Unix printing system
   + =cupsfilter= to convert from plain text to pdf
All of these software dependencies should be preinstalled on a standard installation of Ubuntu Desktop
I have tested this script on Ubuntu Desktop 22.04.1 LTS

* Write zeros
In this block I define the =writezeros= function.

To write all zeros to disk I use the =dd= command, a low level copy command.
It works at the byte level rather than the file level.
The =bs= parameter is short for byte size. In this case it defines how big of a chunk of 0s we copy at once.
Some tuning can be done on a per drive basis but this will give pretty good perfomance for most drives.
See the =man= page for more info about dd.

#+BEGIN_SRC bash
writezeros() {
printf "\nWriting zeros\n"
sudo dd if=/dev/zero of=/dev/$1 bs=64K status=progress
}
#+END_SRC

* Write ones
In this block I define the writeones function.

We can use the =tr= (translate) command to turn a zero from =/dev/zero= to a one.
With our zeros turned to ones we can then write them to the disk in mostly the same way.

#+BEGIN_SRC bash
writeones() {
printf "\nWriting ones\n"
tr '\0' '\377' < /dev/zero | sudo dd of=/dev/$1 bs=64K status=progress
}
#+END_SRC

Notice there is no =if= parameter defined for =dd=.
This is because we are using =stdin= as an implied input by use of the pipe.
The values used in =tr= are octal values.
The < redirects the content of =/dev/zero= as =stdin= for =tr=

* Write random data
In this block I define the =writerandom= function.

Writing random data is just as easy as writing zeros, no bash-fu needed.
This is because the Linux kernel provides =device= files for producing random data, =/dev/urandom= and =/dev/random=.
Technically =/dev/urandom= is psuedo-random based off a seed from the same entropy pool =/dev/random= gets it's data,
but I will refer you to the =man= page for more info.

#+BEGIN_SRC bash
writerandom() {
printf "\nWriting random data\n"
sudo dd if=/dev/urandom of=/dev/$1 bs=64K status=progress
}
#+END_SRC

* Verify random data is written
In this block I define the function =verify= to check if there is random data actually on the disk

#+BEGIN_SRC bash
verify() {
sudo hexdump /dev/$1 -Cs $((RANDOM%5)) -n 128
}
#+END_SRC

* Create a log file and convert to PDF
In this block I define =log= and =logtopdf= for purposes of keeping a record of disks that have been sanitized.

#+BEGIN_SRC bash
log() {
    cat \
    <(date) \
    <(printf "The following disk has been sanitized\nIncluded is pertinent information\nand a random selection of bytes read from the disk\nafter sanitization\n") \
    <(lsblk --nodeps -o name,model,serial,uuid,size /dev/$1) \
    <(verify) > latestsanitization.log
}
logtopdf() {
cupsfilter latestsanitization.log > $(date +"%b%d%Y%H%M").pdf
}
#+END_SRC

* Find out which disk to sanitize
First task is to find out which disk needs to be sanitized.
Ideally this will be as many as you like with the limiting factor being hardware this script is ran on.
To make it a little easier for the operator to figure out which disk is which I will call =lsblk=.
I also define the =finddisktokill= function.

#+BEGIN_SRC bash :shebang "#!/bin/bash"
printf "===============\n"
printf "This script is potentially dangerous! \nIt WILL destroy data and make said data unrecoverable! \n"
printf "===============\n"
finddisktokill() {
printf "Please choose disk to sanitize.\nBe mindful of which disk the OS is written to! \n\n"
lsblk -o name,size,type,mountpoint,serial
read -p "\n Enter the disk name *EXACTLY* as shown in the chart above: " disktokill
}

finddisktokill
#+END_SRC

* Double check that we have the correct disk and sanitize
Now that we know what disk to kill let's make sure the operator is sure they chose the correct disk.

This block of code utilizes the =test= function of bash. The =-b= option is an option flag that checks block file types.
(Disks are block files (remember for Linux everything is a file))
Then we ask twice if the selected disk is correct.
With two operator confirmations we call the writezeros function.
If we get anything other than two confirmations, start over or exit.

#+BEGIN_SRC bash
while true; do
    if [ -b "/dev/$disktokill" ]; then
     read -p "You selected $disktokill. Is this correct? (y/n)" yn
     case $yn in
         [Yy]* ) read -p "Are you sure $disktokill is correct? (y/n)" yn2
                 case $yn2 in
                     [Yy]* ) writezeros $disktokill;
                             writeones $disktokill;
                             writerandom $disktokill;
                             log $disktokill;
                             logtopdf $disktokill;
                             printf "\nSanitization completed!\n"
                             break;;
                     ,* ) printf "\nAborting sanitization!\n";
                          break;;
                 esac
                 break;;
         ,* ) printf "\nAborting sanitization!\n";
              break;;
     esac
    else
     printf "\n $disktokill does not exist in /dev/ \n"
     finddisktokill
    fi
done
#+END_SRC

